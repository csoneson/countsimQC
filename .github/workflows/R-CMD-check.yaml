on:
  push:
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 7 * * 5'

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.image }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }} - ${{ matrix.config.bioc }} - ${{ matrix.config.image }} - ${{ matrix.config.pandoc }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: windows-latest, r: '4.1', bioc: 'devel'}
        - { os: macOS-latest, r: '4.1', bioc: 'devel', curlConfigPath: '/usr/bin/'}
        - { os: macOS-latest, r: '4.1', bioc: 'devel', pandoc: '2.11.4', curlConfigPath: '/usr/bin/'}
        - { os: ubuntu-latest, r: '4.1', bioc: 'devel', cran: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"}
        - { os: ubuntu-latest, r: 'devel', image: 'bioconductor/bioconductor_docker:devel'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      CURL_CONFIG: ${{ matrix.config.curlConfigPath }}curl-config

    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@master
        if: matrix.config.image == null
        with:
          r-version: ${{ matrix.config.r }}

      - name: Set up pandoc (default version)
        uses: r-lib/actions/setup-pandoc@master
        if: matrix.config.image == null && matrix.config.pandoc == null

      - name: Set up pandoc (specified version)
        uses: r-lib/actions/setup-pandoc@master
        if: matrix.config.image == null && matrix.config.pandoc != null
        with:
          pandoc-version: ${{ matrix.config.pandoc }}

      - name: Install remotes and rmarkdown
        run: |
          install.packages(c('remotes', 'rmarkdown'))
        shell: Rscript {0}

      - name: Test pandoc configuration
        run: |
          rmarkdown::pandoc_available()
          rmarkdown::pandoc_version()
          rmarkdown::pandoc_exec()
          rmarkdown::pandoc_citeproc_args()
          file.exists(file.path(dirname(rmarkdown::pandoc_exec()), "pandoc-citeproc"))
          Sys.which("pandoc")
          Sys.which("pandoc-citeproc")
        shell: Rscript {0}

      - name: Set BiocManager version
        if: matrix.config.image == null
        run: |
          remotes::install_github("Bioconductor/BiocManager", ref = "pass-force")
          #install.packages('BiocManager')
          BiocManager::install(version = "${{ matrix.config.bioc }}", ask = FALSE)
        shell: Rscript {0}

      - name: Query dependencies
        run: |
          saveRDS(remotes::dev_package_deps(dependencies = TRUE, repos = c(getOption('repos'), BiocManager::repositories())), 'depends.Rds', version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows' && matrix.config.image == null
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-bioc-${{ matrix.config.bioc }}-pandoc-${{ matrix.config.pandoc }}-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-bioc-${{ matrix.config.bioc }}-pandoc-${{ matrix.config.pandoc }}-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"
          sudo apt-get update && sudo apt-get -y install qpdf
          sudo apt-get -y install libcurl4-gnutls-dev libharfbuzz-dev libfribidi-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install harfbuzz
          brew install fribidi

      - name: Set up gfortran symlinks (macOS)
        if: runner.os == 'macOS'
        run: |
          set -x
          sudo ln -s /usr/local/Cellar/gcc@8/8.4.0_2/lib/gcc/8 /usr/local/gfortran/lib
          gfortran --version

      - name: Install dependencies
        run: |
          local_deps <- remotes::local_package_deps(dependencies = TRUE)
          deps <- remotes::dev_package_deps(dependencies = TRUE, repos = BiocManager::repositories())
          BiocManager::install(local_deps[local_deps %in% deps$package[deps$diff != 0]], Ncpu = 2L)
          remotes::install_cran('rcmdcheck', Ncpu = 2L)
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        run: rcmdcheck::rcmdcheck(args = "--no-manual", error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: BiocCheck
        run: |
          BiocManager::install("BiocCheck")
          BiocCheck::BiocCheck(".")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-bioc-${{ matrix.config.bioc }}-results
          path: check

      - name: Test coverage
        if: matrix.config.os == 'macOS-latest' && matrix.config.pandoc == null
        run: |
          install.packages("covr")
          covr::codecov(token = "${{secrets.CODECOV_TOKEN}}")
        shell: Rscript {0}

      - name: Deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.config.os == 'macOS-latest' && matrix.config.pandoc == null
        run: |
          R CMD INSTALL .
          Rscript -e "remotes::install_dev('pkgdown'); pkgdown::deploy_to_branch(new_process = FALSE)"
